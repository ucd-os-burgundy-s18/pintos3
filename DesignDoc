        +---------------------------+
		    | CS 3453                    |
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Peter Gibbs <peter.gibbs@ucdenver.edu>
Ritesh Sood <ritesh.sood@ucdenver.edu>
Nicolas Wilhoit <nicolas.wilhoit@ucdenver.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Thus far, we are passing the page tests, the frame tests, the regression tests

The VM Pintos design document outlies the process, and questions that are required to be answered 
through the development of Pintos VM

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Pintos Documentation as well as multiple lectures from Ivo are used to build the Pintos VM assignment

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Struct Frame_Entry: used to define where a frame entry is recorded and put pointers there.

struct list global_frame_table: A data structure in the form of a list that shares the global frame table to the program.

struct lock global_frame_lock: Data Structure to lock out the frame when the page is being immediately referenced, or changed.

struct lock global_evictor_lock: Data structure to lock out the frame when a page is being purged from the frame.

struct sup_page_table_entry: Data structure that references the supplemental page table's entries

bool for_swap: used to determine if the page can be swapped or not

bool for_mmap: used to determine if it goes into mmap or not

bool for_file: used to determine if it goes to a file or not

bool is_loaded: used to determine if page was loaded or not

bool is_pinned: used to determine if the page was pinned or not

bool is_writable: used to determine if the page is writable or not

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

The code for accessing the data stored in the SPT is as follows.

1. User will petition for a page/frame to be used.

2. When petitioned, the SPT will be searched for that specific page/frame that is being referenced.

3.  The SPT will load the kernal version of the page into the user area

4. User will make changes/edits/saves

5. Page/frame will be then put into the user page/frame.

6. If there is a need to evict pages, our algorithm will determine the best "victim" to get rid of.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

In the kernel, all accesses to the user stack is done via user virtual
addresses. In syscall.c and exception.c, the user pointers are made sure
to be legal user accesses. Then, using the user address, the supplemental
page table entry is found (which is indexed by the user address). Then the
page is loaded in, if necessary. Therefore, the kernel never uses the
kernel virtual address for the memory, only the user virtual address
indicated in the supplemental page table.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

The frame table lock is used whenever frames are added or evicted to the
global frame table. Thus, when two user processes need a new frame, they
both call frame_alloc. Three situations could occur:

1. Both processes successfully get pages via palloc_get_page(). Thus, both
processes need to add a new frame to the frame table and they are done
sequentially since adding a frame requires holding the frame table lock.
2. Both processes cannot get pages via palloc_get_page(). Thus, they must
both evict frames from the table. However, evicting a frame requires
holding the frame table lock, so the eviction must be done sequentially
(as in situation 1).
3. One process gets a page via palloc_get_page() and one does not. Again,
the adding to the frame table and eviction from the frame table must be
done sequentially since both require the frame table lock.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We chose the data structure we did because it was simple and easy to manipulate the virtual-to-physical mappings.  Most things get mapped
to the supplemental page table, and then we are able to pull from there for the frames.  Doing this method allows us easy eviction of the
attributes when we need to free up space, and easy pulling into the frames from the supplemental page table.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct lock swap_lock:   The global lock for the swap functions.

struct block *swap_block: Where the pages are read from.

struct bitmap *swap_map: used to determine if the page is occupying part of the block or not.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

The algorithm will choose the most likely unneeded page to evict before evicting any other pages.  
In choosing this method, we can keep most of our "lazy loading" structure, and only get rid of pages we are unlikely to run again
any time soon.  The way it does this is by looking for the pages that are set to false.  When the pages are false, it will begin to
evict them one by one and add in new pages to the frames.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Since the frame is freed in the frame eviction and a completely new one is
allocated, there is no remnants of the old frame. In the new frame, the
thread is set to the current thread adding the frame and the spte is set
to the spte the current thread is using the frame for.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Since the PUSHA instruction could cause an access to be 32 bytes below the
stack pointer, any user memory access between PHYS_BASE and esp - 32 is
valid. However, if the virtual address access causes the stack to grow
beyond its maximum size of 8 MB, then the access is considered invalid and
the user program is killed.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Whenever a supplemental page table entry's user virtual address is
accessed via a page fault or syscall, the spte's pinned flag is set to
true. The frame eviction algorithm ignores entries with a true pinned flag,
so it won't evict them. Then, when the kernel is done accessing the user
data, it sets the pinned flag back to false.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

While you are in syscall and working with the page fault, we ensure that if process P is ever 
set to false, then we would change it to true so that it can go through the entire page again.  By doing this
we ensure that the race condition does not occur and as such P will not evict Q until Q has been fully read in
and is no longer needed.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Again, we lock out the ability for this to happen during the execution of
loading the page in.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We manually load in pages that have not been loaded in yet.  This way, we ensure that the full
page goes in without having to worry about it accidently being evicted.  If a virtual address hits the wrong part of the 
kernal space, it is automatically exited. 

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct list mmap_list: The list of the mmapped pages

struct mmap_file: in the mmap_list

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Mmap-ed files are lazy-loaded just like executable files. During page
fault, the mmap-ed file behaves similarly to an executable file as it 
is simply read from the file.They are also loaded into physical memory
similarly. The main difference is they must be written back to the
corresponding file during eviction and munmap. In munmap, the thread
must iterate through its mmap_list, write dirty pages back to disk,
close the mmap-ed file and do other cleanup. During a process exit, all
mmap-ed files are munmapped by default, while other pages are simply
thrown away.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

The file is mapped page by page to its corresponding address. At each page, the spte is added 
to the thread's hash table. If there are dupplicates, then new file mappings are made, and all previous mappings
are unmapped.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

MMapped files are loaded just like executables are.   Both of them will use the 
load_file function, when their pages are being loaded. In the frame, MMapped dirty bits 
are written to their corresponding files. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

This assignment was easily the hardest of the 3 given Pintos assignments.  It definitely was 
difficult in having to figure out how to build the page and frame tables, and then the mmaps
and the munmaps.  It took an extrodinary amount of time to complete.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

The Frame table was really interesting when it was fully finished.  Overall, it was nice learning how
pages are put into frames and then how they are evicted when their use is up.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I believe that there should be a bigger hint on how mmap and munmapping works, for that 
was the most difficult to to implement.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

More readiness to assist when it comes to learning these pintos assignments.

>> Any other comments?

This was difficult
